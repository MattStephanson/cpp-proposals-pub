<pre class='metadata'>
Title: An Executor Property for Occupancy of Execution Agents
Shortname: P1348
URL: wg21.link/P1348
Revision: 1
Audience: LEWG
Status: D
Group: WG21
No Abstract: yes
Markup Shorthands: markdown yes
Markup Shorthands: biblio yes
Editor: David S. Hollman, dshollm@sandia.gov
Editor: Jared Hoberock, jhoberock@nvidia.com
Editor: Lee Howes, lwh@fb.com
Editor: Michael Garland, mgarland@nvidia.com
Editor: H. Carter Edwards, hedwards@nvidia.com
</pre>

Revision History
================
 
## D1348R0

- Initial release, prepared *in situ* at the 2018-11 San Diego meeting.

## P1348R0

- Changed `maximum_occupancy_shape_t` to `occupancy_t` at request of SG1 at San Diego meeting.

## D1348R1

- Changed "thread pool" to "static thread pool" in the non-normative note.
- Added a non-normative note about this property applying to compute bound use cases.
- Changed "might" to "should generally" in the non-normative note.
- Added "always" to non-normative advice on when property should be queryable to address cases where knowability is runtime-determined (a more precise property can be added for this use case later).

After discussion on Tuesday morning in SG1 at the 2019-02 Kona meeting, the following changes were made:

- Changed the normative wording to the phrasing approved by SG1 for forwarding to LEWG via a five-way straw poll with the results 14-6-2-1-0.

Summary and Motivation
======================

We propose the addition of an optional query-only property, `occupancy_t`, with a `polymorphic_query_result_type` of `size_t`.  The intention is that the result of querying this property should be used to drive the decomposition of work into parts and passed to `bulk_execute` to express the number of agents needed.

Previous discussion by authors of [[P0443r9]] had indicated an understanding that such a property would be added at some future time.  Discussion at the 2018-11 San Diego meeting served to increse the acuteness of the need and demonstrate just how cross-cutting the concern is.  At least dating back to earliest discussions of `std::reduce` parallel implementations using [[P0443r9]], the authors recognized this need:

```c++
// XXX ideally, we'd partition the input into a number of tiles
//     proportional to the "unit_shape" of the executor 
//     the idea behind this property is somewhat analogous to what
//     std::thread::hardware_concurrency() reports
//     for example, a thread pool executor would probably return
//     the number of theads in the pool
//     since we don't have such a property, arbitrarily choose 16
size_t desired_num_tiles = 16;
```

(For context, see [https://gist.github.com/jaredhoberock/7888469864b45bf471e686243e8a83c7](https://gist.github.com/jaredhoberock/7888469864b45bf471e686243e8a83c7#file-reduce-hpp-L51)).

Implementation reports at the 2018-11 San Diego meeting further demonstrated the ubiquity of the need for parallel algorithms is to decompose their work into tiles, and that the choice of the number of tiles is a potentially important performance concern.  This number provides guidance to the parallel algorithm calling `bulk_execute` to make an informed choice of what number of tiles they might want to use.

Wording
=======

Add the following property to the section enumerating the query-only properties in [[P0443r9]]:

```c++
struct occupancy_t {
  static constexpr bool is_requirable = false;
  static constexpr bool is_preferable = false;
  
  using polymorphic_query_result_type = size_t;
  
  template<class Executor>
    static constexpr decltype(auto) static_query_v
      = Executor::query(occupancy_t());
};
constexpr occupancy_t occupancy;
```

An estimate of the number of efficiently supported active execution agents.  *[Note:* This value should only be considered to be a hint.  For example, a static thread pool executor would generally return the number of threads in the pool; a SIMD executor would generally return the number of vector lanes; a GPU executor would generally return the total number of hardware thread contexts; the inline executor would generally return `1`.  Unlike `std::thread::hardware_concurrency`, if this value is not always well-defined or not always computable for a given executor type `Ex`, then `execution::can_query_v<Ex, execution::occupancy_t>` should be `false`.  Like `std::thread::hardware_concurrency`, this hint generally applies to compute-bound use cases.  *&mdash;end note]*


Links
=====

* [Discussion and Issue Tracking](https://hackmd.io/frx9fv8dQGaeNhCTxK9lzg)
<!--
* [Rendered Bikeshed Output](http://api.csswg.org/bikeshed/?url=https://hackmd.io/GXTuSSIMTn2QTBPP06lT5Q/download&force=1)
-->


