<pre class='metadata'>
Title:  <code>mdspan</code>: A Non-Owning Multidimensional Array Reference
Shortname: D0009
URL: wg21.link/P0009r6
Revision: 7
Audience: LWG
Status: D
Group: WG21
Issue Tracking: GitHub https://github.com/ORNL/cpp-proposals-pub
!Source: <a href="https://github.com/ORNL/cpp-proposals-pub/blob/master/P0009/P0009.bs">github.com/ORNL/cpp-proposals-pub/blob/master/P0009/P0009.bs</a>
No Abstract: yes
Markup Shorthands: markdown yes
Markup Shorthands: biblio yes
Editor: H. Carter Edwards, hedwards@nvidia.com
Editor: Bryce Adelstein Lelbach, blelbach@nvidia.com
Editor: Daniel Sunderland, dsunder@sandia.gov
Editor: David Hollman, dshollm@sandia.gov
Editor: Christian Trott, crtrott@sandia.gov
Editor: Mauro Bianco, mbianco@cscs.ch
Editor: Ben Sander, ben.sander@amd.com
Editor: Athanasios Iliopoulos, athanasios.iliopoulos@nrl.navy.mil
Editor: John Michopoulos, john.michopoulos@nrl.navy.mil
</pre>

Revision History
================

## P0009r0 : Pre 2015-10-Kona Mailing

Original non-owning multidimensional array reference (`view`) paper with
motivation, specification, and examples.

## P0009r1 : Pre 2016-02-Jacksonville Mailing

[LEWG review at 2015-10-Kona](http://wiki.edg.com/bin/view/Wg21kona2015/P0009).

**LEWG Poll**: What should this feature be called?

<table>
<thead>
<tr>
<th>Name</th>
<th>#</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>view</code></td>
<td> 5 </td>
</tr>
<tr>
<td><code>span</code></td>
<td> 9 </td>
</tr>
<tr>
<td><code>array_ref</code></td>
<td> 6 </td>
</tr>
<tr>
<td><code>slice</code></td>
<td> 6 </td>
</tr>
<tr>
<td><code>array_view</code></td>
<td> 6 </td>
</tr>
<tr>
<td><code>ref</code></td>
<td> 0 </td>
</tr>
<tr>
<td><code>array_span</code></td>
<td> 7 </td>
</tr>
<tr>
<td><code>basic_span</code></td>
<td> 1 </td>
</tr>
<tr>
<td><code>object_span</code></td>
<td> 3 </td>
</tr>
<tr>
<td><code>field</code></td>
<td> 0 </td>
</tr>
</tbody>
</table>

**LEWG Poll**: Do we want 0-length static extents?

<table>
<thead>
<tr>
<th>SF</th>
<th>F</th>
<th>N</th>
<th>A</th>
<th>SA</th>
</tr>
</thead>
<tbody>
<tr>
<td> 3 </td>
<td> 4 </td>
<td> 2 </td>
<td> 3 </td>
<td> 0 </td>
</tr>
</tbody>
</table>

**LEWG POLL**: Do we want the language to support syntaxes like
`X[3][][][5]`?

<table>
<thead>
<tr>
<th>Syntax</th>
<th>#</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>view&lt;int[3][0][][5], property1&gt;</code></td>
<td>12</td>
</tr>
<tr>
<td><code>view&lt;int, dimension&lt;3, 0, dynamic_extent, 5&gt;, property1&gt;</code></td>
<td> 4 </td>
</tr>
<tr>
<td><code>view&lt;int[3][0][dynamic_extent][5], property1&gt;</code></td>
<td> 5 </td>
</tr>
<tr>
<td><code>view&lt;int, 3, 0, dynamic_extent, 5, property1&gt;</code></td>
<td> 4 </td>
</tr>
<tr>
<td><code>view&lt;int, 3, 0, dynamic_extent, 5, properties&lt;property1&gt;&gt;</code></td>
<td> 2 </td>
</tr>
<tr>
<td><code>view&lt;arr&lt;int, 3, 0, dynamic_extent, 5&gt;, property1&gt;</code></td>
<td> 4 </td>
</tr>
<tr>
<td><code>view&lt;int[3][0][][5], properties&lt;property1&gt;&gt;</code></td>
<td> 9 </td>
</tr>
</tbody>
</table>

**LEWG POLL**: Do we want the variadic property list in template args
(either raw or in `properties<>`)? Note there is no precedence for this
in the library.

<table>
<thead>
<tr>
<th>SF</th>
<th>F</th>
<th>N</th>
<th>A</th>
<th>SA</th>
</tr>
</thead>
<tbody>
<tr>
<td> 3 </td>
<td> 6 </td>
<td> 3 </td>
<td> 0 </td>
<td> 0 </td>
</tr>
</tbody>
</table>

**LEWG POLL**: Do we want the per-view bounds-checking knob?

<table>
<thead>
<tr>
<th>SF</th>
<th>F</th>
<th>N</th>
<th>A</th>
<th>SA</th>
</tr>
</thead>
<tbody>
<tr>
<td> 3 </td>
<td> 4 </td>
<td> 1 </td>
<td> 2 </td>
<td> 1 </td>
</tr>
</tbody>
</table>

**Changes from P0009r0**:

-   Renamed `view` to `array_ref`.
-   How are users allowed to add properties? Needs elaboration in
    paper.
-   `view<int[][][]>::layout` should be named.
-   

    Rename `is_regular` (possibly to `is_affine`) to avoid overloading the

    :   term with the `Regular` concept.

-   Make static span(), operator(), constructor, etc variadic.
-   Demonstrate the need for improper access in the paper.
-   In `operator()`, take integral types by value.

## P0009r2 : Pre 2016-06-Oulu Mailing

[LEWG review at 2016-02-Jacksonville](http://wiki.edg.com/bin/view/Wg21jacksonville/P0009).

**Changes from P0009r1**:

-   Adding details for extensibility of layout mapping.
-   Move motivation, examples, and relaxed incomplete array type
    proposal to separate papers.
    -   [P0331: Motivation and Examples for Polymorphic
        Multidimensional Array](https://wg21.link/P0331).
    -   [P0332: Relaxed Incomplete Multidimensional Array Type
        Declaration](https://wg21.link/P0332).

## P0009r3 : Post 2016-06-Oulu Mailing

[LEWG review at 2016-06-Oulu](http://wiki.edg.com/bin/view/Wg21oulu/P0009)

LEWG did not like the name `array_ref`, and suggested the following
alternatives: - `sci_span` - `numeric_span` - `multidimensional_span` -
`multidim_span` - `mdspan` - `md_span` - `vla_span` - `multispan` -
`multi_span`

**LEWG Poll**: Are member `begin()`/`end()` still good?

<table>
<thead>
<tr>
<th>SF</th>
<th>F</th>
<th>N</th>
<th>A</th>
<th>SA</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td> 2 </td>
<td> 4 </td>
<td> 3 </td>
<td> 1 </td>
</tr>
</tbody>
</table>
**LEWG Poll**: Want this proposal to provide range-producing functions
outside `array_ref`?

<table>
<thead>
<tr>
<th>SF</th>
<th>F</th>
<th>N</th>
<th>A</th>
<th>SA</th>
</tr>
</thead>
<tbody>
<tr>
<td> 0 </td>
<td> 1 </td>
<td> 3 </td>
<td> 2 </td>
<td> 3 </td>
</tr>
</tbody>
</table>

**LEWG Poll**: Want a separate proposal to explore iteration design
space?

<table>
<thead>
<tr>
<th>SF</th>
<th>F</th>
<th>N</th>
<th>A</th>
<th>SA</th>
</tr>
</thead>
<tbody>
<tr>
<td> 9 </td>
<td> 1 </td>
<td> 0 </td>
<td> 0 </td>
<td> 0 </td>
</tr>
</tbody>
</table>

**Changes from P0009r2**:

-   Removed iterator support; a future paper will be written on the
    subject.
-   Noted difference between multidimensional array versus language's
    array-of-array-of-array...
-   Clearly describe requirements for the embedded type aliases
    (`element_type`, `reference`, etc).
-   Expanded description of how the variadic properties list would
    work.
-   Stopped allowing `array_ref<T[N]>` in addition to
    `array_ref<extents<N>>`.
-   Clarified domain, codomain, and domain -> codomain mapping
    specifications.
-   Consistently use *extent* and *extents* for the multidimensional
    index space.

## P0009r4 : Pre 2017-11-Albuquerque Mailing

[LEWG review at 2017-03-Kona meeting](http://wiki.edg.com/bin/view/Wg21kona2017/P0009)

[LEWG review of P0546r1 at 2017-03-Kona meeting](http://wiki.edg.com/bin/view/Wg21kona2017/P0546)

**LEWG Poll**: Should we have a single template that covers both single
and multi-dimensional spans?

<table>
<thead>
<tr>
<th>SF</th>
<th>F</th>
<th>N</th>
<th>A</th>
<th>SA</th>
</tr>
</thead>
<tbody>
<tr>
<td> 1 </td>
<td> 6 </td>
<td> 2 </td>
<td> 6 </td>
<td> 3 </td>
</tr>
</tbody>
</table>

**Changes from P0009r3**:

-   Align with P0122r5 span[proposal](https://wg21.link/P0122r5).
-   Rename to `mdspan`, multidimensional span, to align with `span`.
-   Move preferred array extents mechanism to appendix.
-   Expose codomain as a `span`.
-   Add layout mapping concept.

## P0009r5 : Pre 2018-03-Jacksonville Mailing

[LEWG review of P0009r4 at 2017-11-Albuquerque
meeting](http://wiki.edg.com/bin/view/Wg21albuquerque/P0009)

**LEWG Poll**: We should be able to index with `span<int type[N]>` (in
addition to array).

<table>
<thead>
<tr>
<th>SF</th>
<th>F</th>
<th>N</th>
<th>A</th>
<th>SA</th>
</tr>
</thead>
<tbody>
<tr>
<td> 2 </td>
<td>11</td>
<td> 1 </td>
<td> 1 </td>
<td> 0 </td>
</tr>
</tbody>
</table>

Against comment - there is not a proven needs for this feature.

**LEWG Poll**: We should be able to index with 1d `mdspan`.

<table>
<thead>
<tr>
<th>SF</th>
<th>F</th>
<th>N</th>
<th>A</th>
<th>SA</th>
</tr>
</thead>
<tbody>
<tr>
<td> 0 </td>
<td> 8 </td>
<td> 7 </td>
<td> 0 </td>
<td> 0 </td>
</tr>
</tbody>
</table>

**LEWG Poll**: We should put the requirement on "rank() <= N" back to
"rank() == N".

*Unanimous consent*

**LEWG Poll**: With the editorial changes from small group, plus the
above polls, forward this to LWG for Fundamentals v3.

*Unanimous consent*

**Changes from P0009r4**:

-   Removed nullptr constructor.
-   Added constexpr to indexing operator.
-   Indexing operator requires that `rank() == sizeof...(indices)`.
-   Fixed typos in examples and moved them to appendix.
-   Converted note on how extentions to access properties may cause
    reference to be a proxy type to an "see below" to make it
    normative.

## P0009r6 : Pre 2018-06-Rapperswil Mailing

P0009r5 was not taken up at 2018-03-Jacksonville meeting. Related [LEWG
review of P0900 at 2018-03-Jacksonville
meeting](http://wiki.edg.com/bin/view/Wg21jacksonville2018/P0900)

**LEWG Poll**: We want the ability to customize the access to elements
of span (ability to restrict, etc):

```c++
span<T, N, Accessor=...>
```

<table>
<thead>
<tr>
<th>SF</th>
<th>F</th>
<th>N</th>
<th>A</th>
<th>SA</th>
</tr>
</thead>
<tbody>
<tr>
<td> 1 </td>
<td> 1 </td>
<td> 1 </td>
<td> 2 </td>
<td> 8 </td>
</tr>
</tbody>
</table>

**LEWG Poll**: We want the customization of `basic_mdspan` to be two
concepts `Mapper` and `Accessor` (akin to `Allocator` design).

```c++
basic_mdspan<T, Extents, Mapper, Accessor>
mdspan<T, N...>
```

<table>
<thead>
<tr>
<th>SF</th>
<th>F</th>
<th>N</th>
<th>A</th>
<th>SA</th>
</tr>
</thead>
<tbody>
<tr>
<td> 3 </td>
<td> 4 </td>
<td> 5 </td>
<td> 1 </td>
<td> 0 </td>
</tr>
</tbody>
</table>

**LEWG Poll**: We want the customization of `basic_mdspan` to be an
arbitrary (and potentially user-extensible) list of properties.

```c++
basic_mdspan<T, Extents, Properties...>
```

<table>
<thead>
<tr>
<th>SF</th>
<th>F</th>
<th>N</th>
<th>A</th>
<th>SA</th>
</tr>
</thead>
<tbody>
<tr>
<td> 1 </td>
<td> 2 </td>
<td> 2 </td>
<td> 6 </td>
<td> 2 </td>
</tr>
</tbody>
</table>

**Changes from P0009r5 due to related LEWG reviews**:

-   Replaced variadic property list with *extents*, *layout mapping*,
    and *accessor* properties.
-   Incorporated [P0454r1](https://wg21.link/P0454r1).
    -   Added accessor policy concept.
    -   Renamed `mdspan` to `basic_mdspan`.
    -   Added a `mdspan` alias to `basic_mdspan`.

## P0009r7: Post 2018-06-Rapperswil Mailing

TODO summarize changes here

## Related Activity

Related [LEWG review of P0546r1 at 2017-11-Albuquerque meeting](http://wiki.edg.com/bin/view/Wg21albuquerque/P0546)

**LEWG Poll**: `span` should specify the dynamic extent as the element
type of the first template parameter rather than the (current) second
template parameter

<table>
<thead>
<tr>
<th>SF</th>
<th>F</th>
<th>N</th>
<th>A</th>
<th>SA</th>
</tr>
</thead>
<tbody>
<tr>
<td> 5 </td>
<td> 3 </td>
<td> 2 </td>
<td> 2 </td>
<td> 0 </td>
</tr>
</tbody>
</table>

**LEWG Poll**: `span` should support the addition of access properties
variadic template parameters

<table>
<thead>
<tr>
<th>SF</th>
<th>F</th>
<th>N</th>
<th>A</th>
<th>SA</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>10</td>
<td> 1 </td>
<td> 5 </td>
<td> 0 </td>
</tr>
</tbody>
</table>

Authors agreed to bring a separate paper
([[P0900r0]]) discussing how the variadic
properties will work.

Description
===========

The proposed polymorphic multidimensional array reference (`mdspan`)
defines types and functions for mapping indices from the **domain**, a
**multidimensional index space**, to the **codomain**, elements of a
contiguous span of objects. A multidimensional index space is defined as
the Cartesian product of integer extents, *[0..N0) X [0..N1) X [0..N2) ...*.
An `mdspan` has two policies: the **layout mapping**
and the **accessor**. The layout mapping specifies the formula, and
properties of the formula, for mapping a multi-index from the domain to
an element in the codomain. The accessor is an extension point that
allows modification of how elements are accessed. For example, the
Accessors paper (P0367) proposed a rich set of potential access
properties.

**A multidimensional array is not an array-of-array-of-array-of-array...**

The multidimensional array abstraction has been fundamental to numerical
computations for over five decades. However, the C/C++ language provides
only a one dimensional array abstraction which can be composed into
array-of-array-of-array... types. While such types have some similarity
to multidimensional arrays they do not provide adequate multidimensional
array functionality of this proposal. Two critical functionality
differences are (1) multiple dynamic extents and (2) polymorphic mapping
of multi-indices to element objects.

**Optimized Implementation of Layout Mapping**

The layout mapping of a multi-index intended to be an O(1) constexpr
operation that is trivially inlined and optimized. Note that FORTRAN
compilers' optimizations include loop invariant code motion, including
partial evaluation of multi-index layout mappings when indices are
loop-invariant.

Editing Notes
=============

The proposed changes are relative to the working draft of the standard
as of \[N4750](http://wg21.link/n4750).

The � character is used to denote a placeholder section number, table number,
or paragraph number which the editor shall determine.

Add the header `<mdspan>` to table 16 in **[headers]**.  

Add the header `<mdspan>` to Table 76 in 26.1 **[containers.general]** below
the listing for `<span>`.

Wording
=======

---

*Add the following paragraphs to* **[views.general]**:

�. The header `<mdspan>` defines the view `basic_mdspan`, the type alias `mdspan`, 
and other facilities for interacting with these views.  
The `basic_mdspan` class template maps a multi-index within a multi-index *domain*
to a reference an element in the *codomain* `span`.

�. The `subspan` function generates a `basic_mdspan` with a domain
contained within the input `basic_mdspan` domain and codomain contained
within the input `basic_mdspan` codomain.

---

*Add the following subclauses to the end of the* **[views]** *subclause (currently 26.7)*:

<b>26.7.� Header `<mdspan>` synopsis [mdspan.syn]</b>

<!-- TODO references to subclauses in synopsis comments -->

```c++
namespace std {
  // Multidimensional extents:
  template<ptrdiff_t... StaticExtents>
    class extents;

  // Layout mapping of multidimensional extents:
  class layout_right;
  class layout_left;
  class layout_stride;

  // Accessors:
  class accessor_basic;

  // Multidimensional span:
  template<class ElementType,
           class Extents,
           class LayoutPolicy = layout_right,
           class AccessorPolicy = accessor_basic>
    class basic_mdspan;

  template<class T, ptrdiff_t... Extents>
    using mdspan = basic_mdspan<T, extents<Extents...>>;

  template<ptrdiff_t... LHS, ptrdiff_t... RHS>
    constexpr bool operator==(const extents<LHS...>& lhs, const extents<RHS...>& rhs);

  template<ptrdiff_t... LHS, ptrdiff_t... RHS>
    constexpr bool operator!=(const extents<LHS...>& lhs, const extents<RHS...>& rhs);

  // return type of subspan free function is an mdspan
  template<class ElementType, class Extents, class LayoutPolicy,
           class AccessorPolicy, class... SliceSpecifiers>
    /* unspecified */
      subspan(const basic_mdspan<ElementType, Extents, LayoutPolicy, AccessorPolicy>&, SliceSpecifiers...) noexcept;

  // tag supporting subspan
  struct all_type {};
  inline constexpr all_type all = all_type{};
}
```

<b>26.7.� Class template `extents` [mdspan.extents]</b>

<b>26.7.�.1 Overview [mdspan.extents.overview]</b>

1. An `extents` object defines the lengths of the dimensions of a `basic_mdspan`.
2. The *dynamic extents* of an `extents` object correspond to the `StaticExtents` template parameters that are equal to `dynamic_extent`.  Let *DynamicRank[i]* denote the index of the *i*th such extent in the `StaticExtents` template parameter pack.
3. An `extents` object is expected to store dynamic extents
4. *[Note:* An implementation should not consume storage for static extents. *— end note]* 
5. If any of `StaticExtents` are negative and not equal to `dynamic_extent`, the program is ill-formed.

<!-- TODO review change to make rank() and rank_dynamic() size_t -->
<!-- TODO review addition of array constructor -->

```c++
namespace std {

template<ptrdiff_t... StaticExtents>
class extents {
public:
  // types
  using index_type = ptrdiff_t;

  // 26.7.�.2 Constructors and assignment
  constexpr extents() noexcept;
  constexpr extents(const extents&) noexcept;
  constexpr extents(extents&&) noexcept;
  template<class... IndexType>
  constexpr extents(IndexType... DynamicExtents) noexcept;
  template<class IndexType, size_t N>
  constexpr extents(const array<IndexType, N>&) noexcept;
  ~extents() noexcept = default;

  constexpr extents& operator=(const extents&) noexcept = default;
  constexpr extents& operator=(extents&&) noexcept = default;

  // 26.7.�.3 Observers of the index space domain:
  static constexpr size_t rank() noexcept;
  static constexpr size_t rank_dynamic() noexcept;
  static constexpr index_type static_extent(int) noexcept;
  constexpr index_type extent(int) const noexcept;

private:
  array<index_type, rank_dynamic()> dynamic_extents_; // exposition only
};

}
```

<b>26.7.�.2 Constructors and assignment [mdspan.extents.cons]</b>

```c++
constexpr extents() noexcept;
```

* *Effects:* Aggregate-initializes `dynamic_extents_` to `{ }`
* *Postconditions:* `extent(r)` if `static_extent(r) == dynamic_extent` for `0 <= r < rank()`

<br/>
```c++
constexpr extents(const extents& other);
constexpr extents(extents&& other);
```

<!-- TODO Review this. Should this be two different sections, or does it not matter for move initialization of array? -->

* *Effects:* Initializes `dynamic_extents_` with `other.dynamic_extents_`
* *Postconditions:* `extent(r) == other.extent(r)` for all `r` where `0 <= r < rank()`

<br/>

```c++
template<class... IndexType>
constexpr extents(IndexType... dynamic_extents) noexcept;
```

<!-- TODO look at how parameter pack expansions are specified in, e.g., integer_sequence -->
<!-- TODO @CRT: Please review to make sure this is the desired behavior -->

* *Requires:* `((dynamic_extents >= 0) && ...)`
* *Effects:* Aggregate-initializes `dynamic_extents_` to `{dynamic_extents...}`
* *Postconditions:* `extent(`*DynamicRank[i]*`)` is equal to the *i*th entry in the parameter pack `dynamic_extents`
* *Remarks:* This constructor shall not participate in overload resolution unless:
    + `(is_integral_v<IndexType> && ...)`
    + and `sizeof...(dynamic_extents) == rank_dynamic()`

```c++
template<class IndexType, size_t N>
constexpr extents(array<IndexType, N> dynamic_extents) noexcept;
```

* *Requires:* `dynamic_extents[i] >= 0` for all `i` where `0 <= i <= rank_dynamic()`
* *Effects:* Initializes `dynamic_extents_` with `dynamic_extents`
* *Postconditions:* `extent(`*DynamicRank[i]*`)` is equal to `dynamic_extents[i]`
* *Remarks:* This constructor shall not participate in overload resolution unless:
    + `is_integral_v<IndexType>`
    + `N == rank_dynamic()`

<br/>
<br/>
<b>26.7.�.3 Observers of the index space domain [mdspan.extents.obs]</b>

<br/>
```c++
static constexpr size_t rank() const noexcept;
```

* *Returns:* `sizeof...(StaticExtents)`

<br/>
```c++
static constexpr size_t rank_dynamic() const noexcept;
```

<!-- DSH: Added note because I was afraid I was being too clever -->
* *Returns:* `((StaticExtents == dynamic_extent) + ...)` *[Note:* This is the number of dynamic extents *—end note]*

<br/>
```c++
static constexpr index_type static_extent(int r) const noexcept;
```

* *Returns:* The `r`th entry in the `StaticExtents` parameter pack if 0 <= `r` < `rank()`, or 1 otherwise.

<br/>
```c++
constexpr index_type extent(int r) const noexcept;
```

<!-- TODO Does this need an example? -->
* *Returns:* 
    * If `static_extent(r) == dynamic_extent`, then `dynamic_extents_[k]`, where `k` is the number of extents equal to `dynamic_extent` in the first `r` entries of the `StaticExtents` parameter pack.
    * Otherwise, `static_extent(r)`

<!-- ####################################################################### -->
<!-- #####################  layout mapping policy  ######################### -->
<!-- ####################################################################### -->

<br/>
<br/>
<b>26.7.� Layout mapping policy [mdspan.layout]</b>

<b>26.7.�.1 Layout mapping requirements [mdspan.layout.reqs]</b>

1. A *layout mapping policy* is a class that contains a *layout mapping*, a nested class template.

2. A *layout mapping policy* shall meet the requirements in table �.

3. A *layout mapping* shall meet the requirements of `DefaultConstructible`, `CopyAssignable`, `EqualityComparable`, and the requirements in table �.

4. In Table �:
    * `MP` denotes a layout mapping policy.
    * `M` denotes a layout mapping.
    * `m` denotes a value of type `M`.
    * `E` denotes a specialization of `extents`.
    * `e` denotes a value of type `E`.
    * `i` denotes a pack of `E::rank_dynamic()` values of type `E::index_type`.
    * `r` is a value of an integral type

<!-- TODO @CRT and @HCE: Review minor design change consolidating extents-like member functions into get_extents() -->

Table � — Layout mapping policy and layout mapping requirements
<table border=1>
<tr>
  <th>Expression</th>
  <th>Return Type</th>
  <th>Operational Semantics</th>
  <th>Requires/Remarks</th>
</tr>
<tr>
  <td>`MP::mapping<E>`</td>
  <td>`M`</td>
  <td></td>
  <td></td>
</tr>
<tr>
  <td>`M m(e)`</td>
  <td>`M`</td>
    <td>*Effects:* Constructs a new mapping from the extents `e`.</td>
  <td></td>
</tr>
<tr>
  <td>`m.get_extents()`</td>
  <td>`E`</td>
  <td>*Returns:* `e`.</td>
  <td></td>
</tr>
<tr>
  <td>`m.required_span_size()`</td>
  <td>`E::index_type`</td>
  <td>*Returns:* the number of elements needed to store all the mapped indices.</td>
  <td>*Requires:* `0 <= m.required_span_size()`.</td>
</tr>
<tr>
  <td>`m(i...)`</td>
  <td>`E::index_type`</td>
  <!-- TODO Review this wording! -->
  <td>*Returns:* The distance between the start and the element of the multi-index space denoted by `i...` in the codomain `span` of the `basic_mdspan` for which `*this` is a layout mapping. </td>
  <td>*Requires:* `0 <= m(i...) < m.required_span_size()`</td>
</tr>
<tr>
  <td>`M::is_always_unique()`</td>
  <td>`bool`</td>
  <td>*Returns:* !!!TODO!!!</td>
  <td></td>
</tr>
<tr>
  <td>`M::is_always_contiguous()`</td>
  <td>`bool`</td>
  <td>*Returns:* !!!TODO!!!</td>
  <td></td>
</tr>
<tr>
  <td>`M::is_always_strided()`</td>
  <td>`bool`</td>
  <td>*Returns:* !!!TODO!!!</td>
  <td></td>
</tr>
<tr>
  <td>`m.is_unique()`</td>
  <td>`bool`</td>
  <td>*Returns:* !!!TODO!!!</td>
  <td></td>
</tr>
<tr>
  <td>`m.is_contiguous()`</td>
  <td>`bool`</td>
  <td>*Returns:* !!!TODO!!!</td>
  <td></td>
</tr>
<tr>
  <td>`m.is_strided()`</td>
  <td>`bool`</td>
  <td>*Returns:* !!!TODO!!!</td>
  <td></td>
</tr>
<tr>
  <td>`m.stride(r)`</td>
  <td>`E::index_type`</td>
  <td>*Returns:* !!!TODO!!!</td>
  <td></td>
</tr>
</table>


<!-- ####################################################################### -->
<!-- #####################  layout_left  ################################### -->
<!-- ####################################################################### -->

<!-- TODO conversion from other layouts? -->

<br/>
<br/>
<b>26.7.�.2 Class layout_left [mdspan.layout.left]</b>

1. `layout_left` meets the requirements of layout mapping policy.  *[Note:* Thus, any well-formed specialization of `layout_left::mapping` meets the requirements of layout mapping *—end note]*
2. `layout_left` gives a layout mapping where the left-most extent is stride one and strides increase left-to-right as the product of extents.
3. If `Extents` is not a (possibly cv-qualified) specialization of `extents`, the program is ill-formed.

```c++
struct layout_left {
  template <typename Extents>
  class mapping {
  public:
    constexpr mapping() noexcept;
    constexpr mapping(mapping const& other) noexcept;
    constexpr mapping(mapping&& other) noexcept;
    constexpr mapping(Extents e) noexcept;

    mapping& operator=() noexcept = default;
    mapping& operator=(mapping const& other) noexcept = default;

    Extents get_extents() const noexcept;

    constexpr typename Extents::index_type required_span_size() const noexcept;

    template <class... Indices>
      typename Extents::index_type operator()(Indices... is) const;

    static constexpr bool is_always_unique();
    static constexpr bool is_always_contiguous();
    static constexpr bool is_always_strided();

    constexpr bool is_unique() const;
    constexpr bool is_contiguous() const;
    constexpr bool is_strided() const;

    constexpr bool operator==(const mapping& other) const;
    constexpr bool operator!=(const mapping& other) const;

  private:
    Extents extents_; // exposition only
  };
};
```


<br/>

<b>26.7.�.2.1 `layout_left::mapping` constructors [mdspan.layout.left.cons]</b>

<!-- --- -->
<!-- Mimicking exposition-only specification style in [istreambuf.iterator.cons] and using [objects.with.classes]/2 for guidance -->

<br/>

```c++
constexpr mapping() noexcept;
```

* *Effects:* Default-initializes `extents_`.
* *Postconditions:* `get_extents() == Extents()`

<!-- --- -->

<br/>

```c++
constexpr mapping(mapping const& other) noexcept;
```

* *Effects:* Initializes `extents_` with `other.extents_`.
* *Postconditions:* `get_extents() == other.get_extents()`.

<!-- --- -->

<br/>

```c++
constexpr mapping(mapping&& other) noexcept;
```

* *Effects:* Initializes `extents_` with `move(other.extents_)`.
* *Postconditions:* `get_extents()` returns a copy of an `Extents` that is equal to the copy returned by `other.get_extents()` before the invocation of the move.

<!-- --- -->

<br/>

```c++
constexpr mapping(Extents e) noexcept;
```

* *Effects:* Initializes `extents_` with `e`.
* *Postconditions:* `get_extents() == e`.

<!-- --- -->

<br/>

<b>26.7.�.2.2 `layout_left::mapping` operations [mdspan.layout.left.ops]</b>

<br/>

```c++
Extents get_extents() const noexcept;
```

* *Returns:* `extents_`.

<!-- --- -->

<br/>

```c++
typename Extents::index_type required_span_size() const noexcept;
```

* *Returns:* The product of `get_extents().extent(r)` for all `r` where `0 <= r < get_extents().rank()`

<!-- --- -->

<br/>
```
template <class... Indices>
  typename Extents::index_type operator()(Indices... i) const;
```

* *Requires:* `sizeof...(Indices) == get_extents().rank()`

<!-- TODO Check this -->
<!-- TODO Math-style formatting? e.g., MathJax? -->

* *Returns:* If `i...` is `i0, i1, i2,`*...*`, ik` (where `k == get_extents().rank() - 1`) and `e = get_extents()`, returns `i0 + i1*e[0] + i2*e[0]*e[1] + `*...*` + ik*e[0]*e[1]*`*...*`*e[k-1]`

* *Remarks:* This operator shall not participate in overload resolution unless
    * `sizeof...(Indices) == get_extents().rank()`,
    * and `is_convertible_v<Indices, typename Extents::index_type> && ...`


```
```

<br/>
```c++
static constexpr bool is_always_unique();
static constexpr bool is_always_contiguous();
constexpr bool is_unique() const;
constexpr bool is_contiguous() const;
```

* *Returns:* `true`

<br/>
```c++
static constexpr bool is_always_strided();
constexpr bool is_strided() const;
```

* *Returns:* `false`

<br/>
```c++
constexpr bool operator==(const mapping& other) const noexcept;
```

* *Returns:* `true`

<br/>
```c++
constexpr bool operator!=(const mapping& other) const noexcept;
```

* *Returns:* `false`

<!-- ####################################################################### -->
<!-- #####################  layout_right  ################################### -->
<!-- ####################################################################### -->

<br/>
<br/>
<b>26.7.�.3 Class layout_right [mdspan.layout.right]</b>

1. `layout_right` meets the requirements of layout mapping policy.  *[Note:* Thus, any well-formed specialization of `layout_right::mapping` meets the requirements of layout mapping *—end note]*
2. The layout mapping property `layout_right` gives a layout mapping where the right-most extent is stride one and strides increase right-to-left as the product of extents.
3. If `Extents` is not a (possibly cv-qualified) specialization of `extents`, the program is ill-formed.

```c++
struct layout_right {
  template <typename Extents>
  class mapping {
  public:
    constexpr mapping() noexcept;
    constexpr mapping(mapping const& other) noexcept;
    constexpr mapping(mapping&& other) noexcept;
    constexpr mapping(Extents e) noexcept;

    mapping& operator=() noexcept = default;
    mapping& operator=(mapping const& other) noexcept = default;

    Extents get_extents() const noexcept;

    constexpr typename Extents::index_type required_span_size() const noexcept;

    template <class... Indices>
      typename Extents::index_type operator()(Indices... is) const;

    static constexpr bool is_always_unique();
    static constexpr bool is_always_contiguous();
    static constexpr bool is_always_strided();

    constexpr bool is_unique() const;
    constexpr bool is_contiguous() const;
    constexpr bool is_strided() const;

  private:
    Extents extents_; // exposition only
  };
};
```


<br/>

<b>26.7.�.3.1 `layout_right::mapping` constructors [mdspan.layout.right.cons]</b>

<!-- --- -->
<!-- Mimicking exposition-only specification style in [istreambuf.iterator.cons] and using [objects.with.classes]/2 for guidance -->

<br/>

```c++
constexpr mapping() noexcept;
```

* *Effects:* Default-initializes `extents_`.
* *Postconditions:* `get_extents() == Extents()`

<!-- --- -->

<br/>

```c++
constexpr mapping(mapping const& other) noexcept;
```

* *Effects:* Initializes `extents_` with `other.extents_`.
* *Postconditions:* `get_extents() == other.get_extents()`.

<!-- --- -->

<br/>

```c++
constexpr mapping(mapping&& other) noexcept;
```

* *Effects:* Initializes `extents_` with `move(other.extents_)`.
* *Postconditions:* `get_extents()` returns a copy of an `Extents` that is equal to the copy returned by `other.get_extents()` before the invocation of the move.

<!-- --- -->

<br/>

```c++
constexpr mapping(Extents e) noexcept;
```

* *Effects:* Initializes `extents_` with `e`.
* *Postconditions:* `get_extents() == e`.

<!-- --- -->

<br/>

<b>26.7.�.3.2 `layout_right::mapping` operations [mdspan.layout.right.ops]</b>

<br/>

```c++
Extents get_extents() const noexcept;
```

* *Returns:* `extents_`.

<!-- --- -->

<br/>

```c++
typename Extents::index_type required_span_size() const noexcept;
```

* *Returns:* The product of `get_extents().extent(r)` for all `r` where `0 <= r < get_extents().rank()`

<!-- --- -->

<br/>
```
template <class... Indices>
  typename Extents::index_type operator()(Indices... i) const;
```


<!-- TODO Check this -->
<!-- TODO Math-style formatting? e.g., MathJax? -->

* *Returns:* If `i...` is `i0, i1, i2, `*...*`, ik` (where `k == get_extents().rank() - 1`) and `e = get_extents()`, returns `i0*e[1]*`*...*`*e[k] + i1*e[2]*`*...*`*e[k] + `*...*` + ik`

* *Remarks:* This operator shall not participate in overload resolution unless
    * `sizeof...(Indices) == get_extents().rank()`,
    * and `is_convertible_v<Indices, typename Extents::index_type> && ...`


<br/>

```c++
static constexpr bool is_always_unique();
static constexpr bool is_always_contiguous();
constexpr bool is_unique() const;
constexpr bool is_contiguous() const;
```

* *Returns:* `true`

<br/>

```c++
static constexpr bool is_always_strided();
constexpr bool is_strided() const;
```

* *Returns:* `false`

<br/>
```c++
constexpr bool operator==(const mapping& other) const noexcept;
```

* *Returns:* `true`

<br/>
```c++
constexpr bool operator!=(const mapping& other) const noexcept;
```

* *Returns:* `false`

<!-- TODO layout_stride -->

<!-- ####################################################################### -->
<!-- #####################  accessor policy  ############################### -->
<!-- ####################################################################### -->

<!-- TODO: @CRT review whether these requirements are flexible enough -->
<!-- TODO: Review changes here. This was too hard to specify as a nested class, and I'm not sure it buys us anything. 
(specifically, it was getting really messy trying to allow accessor implementations to constrain what types they are valid for.) -->

<br/>
<br/>

<b>26.7.� Accessor [mdspan.accessor]</b>

<br/>
<b>26.7.�.1 Accessor requirements [mdspan.accessor.reqs]</b>

1. An *accessor* is a class that converts a pointer and an offset into a reference. *[Note:* The intended semantic is that the reference refers to a value at the given offset from the given pointer. *—end note]*

5. An *accessor* shall meet the requirements of `DefaultConstructible`, `CopyAssignable`, and the requirements in table �.

In Table �:
  * `A` denotes an accessor.
  * `a` denotes a value of type `A`.
  * `p` denotes a value of type `A::pointer`.
  * `i` denotes an integer.

Table �: Accessor policy and accessor requirements
<table border=1>
<tr>
  <th>Expression</th>
  <th>Return Type</th>
  <th>Operational Semantics</th>
  <th>Requirements/Notes</th>
</tr>
<tr>
  <td>`A::value_type`</td>
  <td></td>
  <td></td>
  <td></td>
</tr>
<tr>
  <td>`A::pointer`</td>
  <td></td>
  <td></td>
  <td>*Requires:* `A::pointer` shall meet the requirements of random access iterator (**[random.access.iterators]**), and `iterator_traits<A::pointer>::value_type` shall be exactly `A::value_type`.</td>
</tr>
<tr>
  <td>`A::reference`</td>
  <td></td>
  <td></td>
  <td>*Requires:* `iterator_traits<A::pointer>::reference` shall be convertible to `A::reference` </td>
</tr>
<tr>
  <td>`a(p, i)`</td>
  <td>`A::reference`</td>
  <td></td>
<!-- TODO review this wording. I'm not sure how to say this or if I need to say this. Should it be a note or a remark? -->
  <td>*[Note:* A `basic_mdspan` implementation shall use the return of this expression as if it is constructed from `p[i]`. *— end note]*</td>
</tr>
</table>

<!-- ####################################################################### -->
<!-- #####################  class accessor_basic  ########################## -->
<!-- ####################################################################### -->

<br/>
<b>26.7.�.2 Class `accessor_basic` [mdspan.accessor.basic]</b>

1. `accessor_basic` meets the requirements of accessor.
<!-- TODO review this summary description -->
2. `accessor_basic` gives an accessor that has semantics equivalent to dereferencing a pointer to an array of values.
3. If `T` is not an object type or is an array type, the program is ill-formed.

```c++
template <typename T>
struct accessor_basic {
  using value_type = T;
  using pointer = T*;
  using reference = T&;
  constexpr reference operator()(pointer p, ptrdiff_t i) const noexcept;
};
```

<br/>
<b>26.7.�.2.1 `accessor_basic` operations [mdspan.accessor.basic.ops]</b>

```c++
constexpr reference operator()(pointer p, ptrdiff_t i) const noexcept;
```

* *Returns:* `p[i]`


<!-- ####################################################################### -->
<!-- #################  class template basic_mdspan  ####################### -->
<!-- ####################################################################### -->

<br/>
<br/>
<b>26.7.� Class template `basic_mdspan` [mdspan.basic]</b>

1. The `basic_mdspan` class template maps a multi-index within a multi-index *domain* to a reference to an element in the *codomain* `span`.
2. The multi-index domain space is the Cartesian product of the extents: `[0, extent(0)) X [0, extent(1)) X`* ... *` X [0, extent(rank() - 1))`. Each extent may be statically or dynamically specified.
2. As with `span`, the storage of the objects in the codomain `span` of a `basic_mdspan` is owned by some other object.
3. `ElementType` is required to be a complete object type that is not an abstract class type or an array type.
4. `Extents` is required to be a (cv-unqualified) specialization of `extents`
5. `LayoutPolicy` is required to be a cv-unqualified object type.
6. If `LayoutPolicy` does not meet the layout policy requirements, the program is ill-formed.
7. `Accessor` is required to be a cv-unqualified object type.
8. If `Accessor` does not meet the accessor requirements, or if `Accessor::value_type` is not exactly `ElementType`, the program is ill-formed.

<!-- TODO: Consider moving Accessor to replace ElementType, since it's never used -->
<!-- TODO: section references in synopsis -->
<!-- TODO: Shouldn't we also have converting move constructors? -->
<!-- TODO: review addition of get_mapping() and get_extents() -->
<!-- TODO: need ways to construct stateful layout policies and stateful accessors -->

```c++
namespace std {

template<typename ElementType, typename Extents, typename LayoutPolicy, typename Accessor>
class basic_mdspan {
public:

  // Domain and codomain types
  using layout = LayoutPolicy;
  using mapping = typename layout::mapping<Extents>;
  using accessor = Accessor;
  using element_type = typename accessor::value_type;
  using value_type = remove_cv_t<element_type>;
  using index_type = ptrdiff_t ;
  using difference_type = ptrdiff_t ;
  using pointer = typename accessor::pointer;
  using reference = typename accessor::reference;

  // Constructors, assignment, and destructor
  constexpr basic_mdspan() noexcept;
  constexpr basic_mdspan(const basic_mdspan&) noexcept;
  constexpr basic_mdspan(basic_mdspan&&) noexcept;
  template<class... IndexType>
    explicit constexpr basic_mdspan(pointer, IndexType... dynamic_extents);
  template<class... IndexType>
    explicit constexpr basic_mdspan(span<element_type>, IndexType... dynamic_extents);
  template <typename OtherElementType, typename OtherExtents, typename OtherLayoutPolicy, typename OtherAccessor>
    constexpr basic_mdspan(const basic_mdspan<OtherElementType, OtherExtents, OtherLayoutPolicy, OtherAccessor>& other);
  template<class IndexType, size_t N>
    explicit constexpr basic_mdspan(pointer, array<IndexType, N> const& dynamic_extents);
  template< class IndexType , size_t N >
    explicit constexpr basic_mdspan(span<element_type>, array<IndexType, N> const& dynamic_extents) noexcept;

  ~basic_mdspan() noexcept;

  constexpr basic_mdspan& operator=(basic_mdspan const&) noexcept = default;
  constexpr basic_mdspan& operator=(basic_mdspan&&) noexcept = default;
  template <typename OtherElementType, typename OtherExtents, typename OtherLayoutPolicy, typename OtherAccessor>
    constexpr basic_mdspan& operator=(const basic_mdspan<OtherElementType, OtherExtents, OtherLayoutPolicy, OtherAccessor>& other) noexcept = default;

  // Mapping domain multi-index to access codomain element
  constexpr reference operator[](index_type) const noexcept;
  template<class... IndexType>
    constexpr reference operator()(IndexType... indices) const noexcept;
  template<class IndexType, size_t N>
    constexpr reference operator()(const array<IndexType, N>& indices) const noexcept;

  // Observers of the domain multi-index space
  static constexpr int rank() noexecept;
  static constexpr int rank_dynamic() noexecept;
  static constexpr index_type static_extent(int) noexecept;

  constexpr Extents get_extents() const noexcept;
  constexpr index_type extent(int) const noexecept;
  constexpr index_type size() const noexecept;

  // Observers of the codomain:
  constexpr span<element_type> span() const noexecept;
  template<class... IndexType>
    static constexpr index_type required_span_size(IndexType... DynamicExtents);
  template<class... IndexType, size_t N>
    static constexpr index_type required_span_size(const array<IndexType, N>& DynamicExtents);

  // Observers of the mapping : domain -> codomain
  static constexpr bool is_always_unique() noexcept;
  static constexpr bool is_always_contiguous() noexcept;
  static constexpr bool is_always_strided() noexcept;

  constexpr mapping get_mapping() const noexcept;
  constexpr bool is_unique() const noexcept;
  constexpr bool is_contiguous() const noexcept;
  constexpr bool is_strided() const noexcept;
  constexpr index_type stride(int) const;

private:
  accessor acc_; // exposition only
  mapping map_; // exposition only
  pointer_type ptr_; // exposition only
};

}
```

<br/>
<b>26.7.�.1 `basic_mdspan` constructors, assignment, and destructor [mdspan.basic.cons]</b>

```c++
constexpr basic_mdspan() noexcept;
```

<!-- TODO check for periods, commas, and "and" here. -->
<!-- TODO: span excludes this constructor if there are no dynamic extents.  Should we do the same? -->
<!-- TODO: decide if we want to include invocation of `span()` in the postconditions. An accessor may want to make this undefined behavior. -->
* *Effects:*
    * Zero-initializes `ptr_`
    * Value-initializes `map_`
    * Value-initializes `acc_`
* *Postconditions:* 
    + `size() == 0`
    + `get_extents() == Extents()`
    + `get_mapping() == mapping()`

<br/>

```c++
constexpr basic_mdspan(const basic_mdspan& other) noexcept;
```

* *Effects:*
    + initializes `ptr_` with `other.ptr_`
    + initializes `map_` with `other.map_`
    + initializes `acc_` with `other.acc_`
* *Postconditions:*
    + `size() == other.size()`
    + `get_extents() == other.get_extents()`
    + `get_mapping() == other.get_mapping()`

<br/>

```c++
constexpr basic_mdspan(basic_mdspan&& other) noexcept;
```

* *Effects:*
    + initializes `ptr_` with `move(other.ptr_)`
    + initializes `map_` with `move(other.map_)`
    + initializes `acc_` with `move(other.acc_)`

<br/>

```c++
template<class... IndexType>
  explicit constexpr basic_mdspan(pointer, IndexType... dynamic_extents);
```

* *Requires:* `[ptr, ptr + required_span_size(dynamic_extents...))` shall be a valid range.
* *Effects:*
    + initializes `ptr_` with `ptr`
    + value-initializes `map_`
    + value-initializes `acc_`
* *Postconditions:* 
    + `size() == 0`
    + `get_extents() == Extents()`
    + `get_mapping() == mapping()`
* *Remarks:* This constructor will not participate in overload resolution unless:
    + `(is_convertible_v<IndexType, index_type> && ...)`, and
    + `sizeof...(dynamic_extents) == rank_dynamic()`
* *Throws:* Nothing.

<!-- TODO is there any reason to prefer `(is_integral_v<IndexType> && ...)`? -->

<br/>

```c++
template<class... IndexType, ptrdiff_t N>
  explicit constexpr basic_mdspan(span<element_type, N> s, IndexType... dynamic_extents);
```

* *Requires:* `s.size() == required_span_size(dynamic_extents...)`
* *Effects:*
    + initializes `ptr_` with `ptr`
    + value-initializes `map_`
    + value-initializes `acc_`
* *Postconditions:* 
    + `size() == 0`
    + `get_extents() == Extents()`
    + `get_mapping() == mapping()`
* *Remarks:* This constructor will not participate in overload resolution unless:
    + `(is_convertible_v<IndexType, index_type> && ...)`,
    + `sizeof...(dynamic_extents) == rank_dynamic()`, and
    + `N == dynamic_extent || (rank_dynamic() == 0 && N == required_span_size(dynamic_extents...))`
* *Throws:* Nothing.


<br/>

<!-- TODO review this wording!!! -->
```c++
template <typename OtherElementType, typename OtherExtents, typename OtherLayoutPolicy, typename OtherAccessor>
  constexpr basic_mdspan(const basic_mdspan<OtherElementType, OtherExtents, OtherLayoutPolicy, OtherAccessor>& other);
```

* *Requires:*
    + TODO WRITE THIS
* *Effects:*
    + initializes `ptr_` with `ptr`
    + value-initializes `map_`
    + value-initializes `acc_`
* *Postconditions:* 
    + `size() == 0`
    + `get_extents() == Extents()`
    + `get_mapping() == mapping()`
* *Remarks:* This constructor will not participate in overload resolution unless:
    + TODO FINISH THIS and clean this up
    + `is_convertible_v<OtherLayoutPolicy::template mapping<OtherExtents>, mapping>`, (SHOULD THIS BE constructible from extents instead?)
    + `is_convertible_v<OtherAccessor, Accessor>`,
    + `is_assignable_v<OtherAccessor::pointer, pointer>`,
    + `sizeof...(dynamic_extents) == rank_dynamic()`, and
    + `N == dynamic_extent || (rank_dynamic() == 0 && N == required_span_size(dynamic_extents...))`
* *Throws:* Nothing.

<br/>

```c++
template<class IndexType, size_t N>
  explicit constexpr basic_mdspan(pointer, array<IndexType, N> const& DynamicExtents) noexcept;
```

TODO WRITE THIS

<br/>

```c++
template< class IndexType , size_t N >
  explicit constexpr basic_mdspan(span<element_type>, array<IndexType, N> const& DynamicExtents) noexcept;
```

TODO WRITE THIS


<br/>
<b>26.7.�.2 `basic_mdspan` mapping domain multi-index to access codomain element [mdspan.basic.mapping]</b>

```c++
static constexpr int rank() noexecept;
```

* *Returns:* `Extents::rank()`.

<br/>

```c++
static constexpr int rank_dynamic() noexecept;
```

* *Returns:* `Extents::rank_dynamic()`.

<br/>

```c++
static constexpr index_type static_extent(int r) noexecept;
```

* *Returns:* `Extents::static_extent(r)`.

<br/>

```c++
constexpr Extents get_extents() const noexcept;
```

* *Returns:* `get_mapping().get_extents()`.

<br/>

```c++
constexpr index_type extent(int r) const noexecept;
```

* *Returns:* `get_extents().extent(r)`.

<br/>

```c++
constexpr index_type size() const noexecept;
```

* *Returns:* Product of `extent(r)` for all `r` where `0 <= r < get_extents().rank()`.

<br/>
<b>26.7.�.3 `basic_mdspan` observers of the codomain [mdspan.basic.codomain]</b>

```c++
constexpr span<element_type, /* see-below */> span() const noexecept;
```

* *Returns:* The codomain `span`.  The return type is:
    * `span<element_type, required_span_size()>` if `rank_dynamic() == 0`, or
    * `span<element_type, dynamic_extent>` otherwise.

<br/>

```c++
template<class... IndexType>
  static constexpr index_type required_span_size(IndexType... dynamic_extents);
```

* *Returns:* `Extents(dynamic_extents...).required_span_size()`

<br/>

```c++
template<class... IndexType, size_t N>
  static constexpr index_type required_span_size(const array<IndexType, N>& dynamic_extents);
```

* *Returns:* `Extents(dynamic_extents).required_span_size()`
  
<br/>
<b>26.7.�.4 `basic_mdspan` observers of the mapping [mdspan.basic.obs]</b>

<br/>

```c++
static constexpr bool is_always_unique() noexcept;
```

* *Returns:* `mapping::is_always_unique()`

<br/>

```c++
static constexpr bool is_always_contiguous() noexcept;
```

* *Returns:* `mapping::is_always_contiguous()`

<br/>

```c++
static constexpr bool is_always_strided() noexcept;
```

* *Returns:* `mapping::is_always_strided()`

<br/>

```c++
constexpr mapping get_mapping() const noexcept;
```

* *Returns:* `map_`

<br/>

```c++
constexpr bool is_unique() const noexcept;
```

* *Returns:* `get_mapping().is_unique()`

<br/>

```c++
constexpr bool is_contiguous() const noexcept;
```

* *Returns:* `get_mapping().is_contiguous()`

<br/>

```c++
constexpr bool is_strided() const noexcept;
```

* *Returns:* `get_mapping().is_strided()`

<br/>

```c++
constexpr index_type stride(int r) const;
```

* *Returns:* `get_mapping().stride(r)`


<!-- ################################################################################ -->
<!-- ################################################################################ -->
<!-- ################################################################################ -->
<!-- ################################################################################ -->
<!-- ################################################################################ -->
<!-- ################################################################################ -->
<!-- ################################################################################ -->

TODO Move over this stuff
=========================


## Class template `basic_mdspan`

`static constexpr int rank();`

> Returns: Rank of the multi-index domain.

`static constexpr int rank_dynamic();`

> Returns: number of extents that are dynamic.

`static constexpr index_type static_extent(int r);`

> Requires: `0 <= r`.
>
> Returns: If `0 <= r < rank()` the statically specified extent. A
> statically declared extent of `dynamic_extent` denotes that the extent
> is dynamic. If `rank() <= r` then `static_extent(r) == 1`.

`constexpr index_type extent(int r) const ;`

> Requires: `0 <= r`.
>
> Returns: If `0 <= r < rank()` the extent of coordinate `r`. If
> `rank() <= r` then `extent(r) == 1`.

`constexpr index_type size() const ;`

> Returns: Product of `extent(r)` where `0 <= r < rank()`.

### Codomain Observers

Not all elements of the codomain may be accessible through the layout
mapping; i.e., the range of the mapping is contained within the codomain
but may not be equal to the codomain.

`constexpr span<element_type> span() const ;`

> Returns: An `span` for the codomain.

| `template< class ... IndexType >`
| `static constexpr index_type required_span_size( IndexType ... DynamicExtents );`

> Requires:
>
> -   `rank_dynamic() == sizeof...(DynamicExtents)`.
> -   `is_integral_type_v<IndexType>...`.
> -   Let `DynamicExtents[ith]` denote the ith coordinate of
>     `DynamicExtents...`. `0 <= DynamicExtents[ith]` for
>     `0 <= ith < rank_dynanic()`.
>
> Returns: The minimum size of the codomain to support the multi-index
> domain defined by the merging of `DynamicExents` with `StaticExtents`.

| `template< class ... IndexType , size_t N >`
| `static constexpr index_type required_span_size( array<IndexType,N> const & DynamicExtents );`

> Requires:
>
> -   `rank_dynamic() == N`
> -   `is_integral_type_v<IndexType>...`
> -   `0 <= DynamicExtents[ith]` for `0 <= ith < rank_dynanic()`
>
> Returns: The minimum size of the codomain to support the multi-index
> domain defined by the merging of `DynamicExents` with `StaticExtents`.

### Constructors, assignments, destructor

`constexpr basic_mdspan();`

> Effect: Construct a *null* `mdspan` with codomain
> `span() == span<element_type>()` and `extent(r) == 0` for all dynamic
> extents.

| `template <typename UT, typename UExt, typename ULayPol, typename UAccPol>`
| `constexpr basic_mdspan(const basic_mdspan<UT, UExt, ULayPol, UAccPol>& other) noexcept;`
| `template <typename UType, typename ... UProp>`
| `constexpr basic_mdspan& operator=(const basic_mdspan<UT, UExt, ULayPol, UAccPol>& other) noexcept;`

> Requires: Given
> `using V = basic_mdspan<ElementType, Extents, LayoutPolicy, AccessorPolicy>`
> and `using U = basic_mdspan<UT, UExt, ULayPol, UAccPol>` then
>
> | `is_assignable_v<typename V::pointer, typename U::pointer> == true`
>   ,
> | `V::rank() == U::rank()` ,
> | `V::static_extent(r) == U::static_extent(r)` or
>   `V::static_extent(r) == dynamic_extent` for `0 <= r < V::rank()` ,
> | compatibility of layout mapping
>
> Effect: `* this` has equal domain, equal codomain, and equivalent
> mapping.

| `template< class ... IndexType >`
| `constexpr basic_mdspan( pointer ptr , IndexType ... DynamicExtents) noexcept`

> Requires:
>
> -   `sizeof...(DynamicExtents) == rank_dynamic()`
> -   `is_integral_type_v<IndexType>...`
> -   The ith coordinate of `DynamicExtents...`, denoted as
>     `DynamicExtents[ith]`, is `0 <= DynamicExtents[ith]`.
> -   `[ ptr , ptr + required_span_size(DynamicExtents...) )`, shall be
>     a valid contiguous span of elements.
>
> Effects: This *wrapping constructor* constructs `* this` with
> domain's dynamic extents equal to `DynamicExtents...` and codomain
> equal to
> `span<element_type>( ptr , required_span_size(DynamicExtents...) )`

| `template< class IndexType , size_t N >`
| `constexpr basic_mdspan( pointer ptr , array<IndexType,N> const & DynamicExtents) noexcept`

> Requires:
>
> -   `N == rank_dynamic()`
> -   `is_integral_type_v<IndexType>...`
> -   `0 <= DynamicExtents[ith]`
> -   The span of elements denoted by
>     `[ ptr , ptr + required_span_size(DynamicExtents) )`, shall be a
>     valid contiguous span of elements.
>
> Effects: This *wrapping constructor* constructs `* this` with
> domain's dynamic extents equal to `DynamicExtents[ith].` and codomain
> equal to
> `span<element_type>( ptr , required_span_size(DynamicExtents) )`

| `template< class ... IndexType >`
| `constexpr basic_mdspan( span<element_type> s , IndexType ... DynamicExtents) noexcept`

> Requires:
>
> -   `sizeof...(DynamicExtents) == rank_dynamic()`
> -   `is_integral_type_v<IndexType>...`
> -   The ith coordinate of `DynamicExtents...`, denoted as
>     `DynamicExtents[ith]`, is `0 <= DynamicExtents[ith]`
> -   `required_span_size(DynamicExtents...) <= s.size()`
>
> Effects: This *wrapping constructor* constructs `* this` with
> domain's dynamic extents equal to `DynamicExtents...` and codomain
> equal to
> `span<element_type>( ptr , required_span_size(DynamicExtents...) )`

| `template< class IndexType , size_t N >`
| `constexpr basic_mdspan( span<element_type> s , array<IndexType,N> const & DynamicExtents) noexcept`

> Requires:
>
> -   `N == rank_dynamic()`
> -   `is_integral_type_v<IndexType>...`
> -   `0 <= DynamicExtents[ith]`
> -   `required_span_size(DynamicExtents) <= s.size()`
>
> Effects: This *wrapping constructor* constructs `* this` with
> domain's dynamic extents equal to `DynamicExtents[ith]` and codomain
> equal to
> `span<element_type>( ptr , required_span_size(DynamicExtents[ith]) )`

### Mapping domain multi-index to access elements in the codomain

| `template< class ... IndexType >`
| `reference operator()( IndexType ... indices ) const noexcept`

> Requires: `indices` is a multi-index in the domain:
>
> -   `rank() == sizeof...(IndexType)`
> -   The ith coordinate of `indices...`, denoted as `indices[ith]`, is
>     in the domain: `0 <= indices[ith] < extent(ith)`.
>
> Returns: A `reference` to the element mapped to by `indices...`.

`reference operator[]( index_type index ) const noexcept`

> Effects: Equivalent to `return (*this)(index);`

| `template< class IndexType , size_t N >`
| `reference operator()( array<IndexType,N> const & indices ) const noexcept`

> Effects: Equivalent to `(*this)(indices[0], ... indices\[N-1]);`.

### Layout Mapping Observers

| `static constexpr bool is_always_unique =`
| `constexpr bool is_unique() const noexcept ;`

> A layout mapping is *unique* if each multi-index in the domain is
> mapped to a unique element in the codomain.

| `static constexpr bool is_always_contiguous =`
| `constexpr bool is_contiguous() const noexcept ;`

> A layout mapping is *contiguous* if the codomain elements accessed
> through the layout mapping form a contiguous span.
>
> A layout mapping that is both unique and contiguous is *bijective*,
> and as a consequence `size() == span().size()`.

| `static constexpr bool is_always_strided =`
| `constexpr bool is_strided() const noexcept ;`

> A *strided* layout has constant striding between multi-index
> coordinates. Let `A` be an `mdspan` and `indices_V...` and
> `indices_U...` be multi-indices in the domain space such that all
> coordinates are equal except for the *ith* coordinate where
> `indices_V[ith] = indices_U[ith] + 1`. Then
> `stride(ith) = distance(& A(indices_V...) - & A( indices_U... )` is
> constant for all valid coordinates.

| `template< typename IntegralType >`
| `constexpr index_type stride( IntegralType index ) const noexcept`

> Requires: `is_strided()`.
>
> Returns: When `r < rank()` the distance between elements when the
> index of coordinate `r` is incremented by one, otherwise 0.

## Class template `extents`


The multi-index domain space is the Cartesian product of the extents:
`[0..extent(0)) X [0..extent(1)) X ... X [0..extent(rank() - 1))`. Each
extent may be statically (at compile time) or dynamically (at runtime)
specified.

`template< ptrdiff_t StaticExtents... >`

> Requires: `0 <= StaticExtent` or `dynamic_extent == StaticExtent`

`static constexpr int rank();`

> Returns: Rank of the multi-index domain, `sizeof...(StaticExtents)`.

`static constexpr int rank_dynamic();`

> Returns: number of `StaticExtents...` that are `dynamic_extent`.

`static constexpr index_type static_extent(int r);`

> Requires: `0 <= r`.
>
> Returns: If `0 <= r < rank()` the statically specified extent. A
> statically declared extent of `dynamic_extent` denotes that the extent
> is dynamic. If `rank() <= r` then `static_extent(r) == 1`.

`constexpr index_type extent(int r) const ;`

> Requires: `0 <= r`.
>
> Returns: If `0 <= r < rank()` the extent of coordinate `r`. If
> `rank() <= r` then `extent(r) == 1`.

| `template< ptrdiff_t ... LHS , ptrdiff_t ... RHS >`
| `constexpr bool operator == ( extents<LHS...> const & lhs , extents<RHS...> const & rhs ) ;`

> Returns: `lhs.rank() == rhs.rank()` and
> `lhs.extent(r) == rhs.extent(r)` for `0 <= r < lhs.rank()`.

| `template< ptrdiff_t ... LHS , ptrdiff_t ... RHS >`
| `constexpr bool operator != ( extents<LHS...> const & lhs , extents<RHS...> const & rhs ) ;`

> Returns: `! ( lhs == rhs )`

## `subspan`

```c++
template <typename ElementType, typename Extents,
          typename LayoutPolicy, typename AccessorPolicy>
// for exposition only:
detail::subspan_deduction_t<basic_mdspan<ElementType, Extents, LayoutPolicy, AccessorPolicy>, SliceSpecifiers...>
subspan(const basic_mdspan<ElementType, Extents, LayoutPolicy, AccessorPolicy>& U , SliceSpecifiers... slices) noexcept;
```

```c++
// given U.rank() == 4
void foo( basic_mdspan< ElementType , Extents , LayoutPolicy > const & U )
{
  auto V = subspan( U , make_pair(1,U.extent(0)-1) , 1 , make_pair(2,U.extent(2)-2 );
  assert( V.extent(0) == U.extent(0) - 2 );
  assert( V.extent(1) == U.extent(2) - 2 );
  assert( & V(0,0) == U(1,1,2,2) );
  assert( & V(1,0) == U(2,1,2,2) );
  assert( & V(0,1) == U(1,1,3,2) );
}
```

### Slice Specifier with Static Extent

The proposed `initializer_list`, `pair`, `tuple`, and `array` slice
specifier types define dynamic extents. When the `all` slice specifier
references a static extent then the subspan's corresponding extent
should be static as well. When the extent of a slice specifier is
statically known there should be a slice specifier type to explicitly
express this knowledge. Such a static extent slice specifier type is
to-be-done.

## Layout Policy Requirements

A `basic_mdspan` maps multi-indices from the domain to reference
elements in the codomain by composing a *layout mapping* with a span of
elements. The layout mapping is an extension point such that an
`basic_mdspan` may be instantiated with non-standard layout mappings.

### Predefined, Standard Layout Policies

The `layout_right` property denotes the C/C++ standard multidimensional
array index mapping where the right-most extent is stride one and
strides increase right-to-left as the product of extents.

The `layout_left` property denotes the FORTRAN standard multidimensional
array index mapping where the left-most extent is stride one and strides
increase left-to-right as the product of extents.

The `layout_stride` property denotes a multidimensional array index
mapping with arbitrary strides for each extent. This is the layout for
subarrays that are not contiguous.

The three standard layouts have the following layout mapping traits.

`layout_right` ; i.e., the C/C++ standard layout

> | `is_always_unique == true`
> | `is_always_contiguous == true`
> | `is_always_strided == true`
> | When `0 < rank()` then `stride(rank()-1) == 1` .
> | When `1 < rank()` then `stride(r-1) = stride(r) * extent(r)` for
>   `0 < r < rank()` ..
>
> For rank-two arrays (a.k.a., matrices) this is also known as *row
> major* layout.

`layout_left` ; i.e., the FORTRAN standard layout

> | `is_always_unique == true`
> | `is_always_contiguous == true`
> | `is_always_strided == true`
> | When `0 < rank()` then `stride(0) == 1` .
> | When `1 < rank()` then `stride(r) = stride(r-1) * extent(r-1)` for
>   `0 < r < rank()` ..
>
> For rank-two arrays (a.k.a., matrices) this is also known as *column
> major* layout.

`layout_stride` ; i.e., an arbitrary **strided** layout

> | `is_always_unique == false`
> | `is_always_contiguous == false`
> | `is_always_strided == true`

### Concept for Extensible Layout Mapping

A *layout* class conforms to the following interface such that an
`mdspan` can compose the layout mapping with its `mdspan` codomain
element reference generation.

```c++
class layout_property /* exposition only */ {
public:

  template< ptrdiff_t ... StaticExtents >
  class mapping {
  public:

    // Domain types

    using index_type = ptrdiff_t ;

    // Constructors, copy, assignment, and destructor

    ~mapping() noexcept = default ;
    constexpr mapping() noexcept = default ;
    constexpr mapping(mapping const&) noexcept = default ;
    mapping& operator=(mapping const&) noexcept = default ;

    // Observers of domain

    static constexpr int rank() noexcept;
    static constexpr int rank_dynamic() noexcept;

    static constexpr index_type static_extent(int) noexcept;

    constexpr index_type extent(int) const noexcept;

    // Observers of the codomain: [0..required_span_size())

    constexpr index_type required_span_size() const noexcept;

    // Observers of the mapping from domain to codomain

    static constexpr bool is_always_unique     = /* unspecified */ ;
    static constexpr bool is_always_contiguous = /* unspecified */ ;
    static constexpr bool is_always_strided    = /* unspecified */ ;

    constexpr bool is_unique() const noexcept;
    constexpr bool is_contiguous() const noexcept;
    constexpr bool is_strided() noexcept;

    constexpr index_type stride(int) const noexcept;

    // Mapping domain index to access codomain element

    template< class ... IndexType >
    constexpr index_type operator()( IndexType ... indices ) const noexcept;
  };
};
```

`template< ptrdiff_t ... StaticExtents > class mapping`

> Requires: Let `StaticExtents[ith]` be the ith member of the pack.
> `StaticExtents[ith] == dynamic_extent` or `0 <= StaticExtents[ith]`.
>
> Effects: Defines the domain index space where
> `rank() == sizeof...(StaticExtents)` and each
> `StaticExtents[ith] == dynamic_extent` denotes that `ith` extent
> coordinate is a dynamic extent.

`constexpr mapping();`

> Effects: If `static_extent(i) != dynamic_extent` then
> `extent(i) == static_extent(i)` otherwise `extent(i) == 0`.

| `explicit constexpr mapping( index_type... ) noexcept;`
| `explicit constexpr mapping(layout_property const&) noexcept;`

> Constructors, assignment operators, and destructor requires and
> effects correspond to the corresponding members of `basic_mdspan` .

| `static constexpr int rank() noexcept;`
| `static constexpr int rank_dynamic() noexcept;`
| `constexpr index_type extent(int) const noexcept;`
| `constexpr index_type static_extent(int) noexcept;`
| 
| `template < class ... IndexType >`
| `static constexpr index_type required_span_size( IndexType ... DynamicExtents ) noexcept;`
| `static constexpr index_type required_span_size( layout_property const & ) noexcept;`
| 
| `static constexpr bool is_always_unique     = /* unspecified */ ;`
| `static constexpr bool is_always_contiguous = /* unspecified */ ;`
| `static constexpr bool is_always_strided    = /* unspecified */ ;`
| 
| `constexpr bool is_unique() const noexcept;`
| `constexpr bool is_contiguous() const noexcept;`
| `constexpr bool is_strided() noexcept;`
| 
| `constexpr index_type stride(int) const noexcept;`

> Domain, codomain, and mapping observers requires and effects
> correspond to the corresponding members of `basic_mdspan` .

| `constexpr index_type required_span_size() const noexcept;`

> Returns: The upper bound of the codomain one dimensional index space
> `[0..required_span_size())`.

| `template< class ... IndexType >`
| `constexpr index_type operator()(IndexType ... indices) const noexcept;`

> Requires: `rank() == sizeof...(indices)` and
> `0 <= indices[ith] < extent(ith)`.
>
> Returns: Result of mapping `indices...` from the domain
> multidimensional index space to the codomain one dimensional index
> space `[0..required_span_size())`.

## Accessor Policy Requirements


## Accessor Policies
Next Steps
==========

-   Wording editing as per guidance from LWG.
-   Address verbose syntax when using `dynamic_extent` to denote
    dynamic extents; *e.g.*, perhaps alias to `dyn`.

Related Work
============

[LEWG issue](https://issues.isocpp.org/show_bug.cgi?id=80)

**Previous paper:**

-   [[N4355]]

**P0860 : Access Policy Generating Proxy Reference**

The `reference` type may be a proxy for accessing an `element_type`
object. For example, the *atomic* `AccessorPolicy` in **P0860** defines
`AccessorPolicy::accessor<T>::reference` to be `atomic_ref<T>` from
**P0019**.

**Related papers:**

-   **P0122** : span: bounds-safe views for sequences of objects The
    `mdspan` codomain concept of *span* is well-aligned with this paper.
-   **P0367** : Accessors The P0367 Accessors proposal includes
    polymorphic mechanisms for accessing the memory an object or span of
    objects. The `AccessPolicy` extension point in this proposal is
    intended to include such memory access properties.
-   **P0331** : Motivation and Examples for Multidimensional Array
-   **P0332** : Relaxed Incomplete Multidimensional Array Type
    Declaration
-   **P0454** : Wording for a Minimal `mdspan` Included proposed
    modification of `span` to better align `span` with `mdspan`.
-   **P0546** : Preparing `span` for the future Proposed modification of
    `span`
-   **P0856** : Restric access property for `mdspan` and `span`
-   **P0860** : atomic access policy for `mdspan`
-   **P0900** : An Ontology of Properties for `mdspan`
